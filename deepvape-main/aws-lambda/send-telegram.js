// AWS Lambda function for sending Telegram notifications
exports.handler = async (event) => {
    // Ë®≠ÂÆö CORS headers
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Content-Type': 'application/json'
    };

    // ËôïÁêÜ OPTIONS Ë´ãÊ±ÇÔºàCORS preflightÔºâ
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers,
            body: ''
        };
    }

    // Âè™ÂÖÅË®± POST Ë´ãÊ±Ç
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            headers,
            body: JSON.stringify({ error: 'Method not allowed' })
        };
    }

    try {
        // ÂæûÁí∞Â¢ÉËÆäÊï∏Áç≤ÂèñÊïèÊÑüË≥áË®ä
        const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
        const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

        if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
            console.error('Missing Telegram configuration');
            return {
                statusCode: 500,
                headers,
                body: JSON.stringify({ error: 'Telegram configuration missing' })
            };
        }

        // Ëß£ÊûêË´ãÊ±ÇÂÖßÂÆπ
        let orderData;
        try {
            orderData = JSON.parse(event.body);
        } catch (parseError) {
            return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ error: 'Invalid request body' })
            };
        }

        // ÊßãÂª∫ Telegram Ë®äÊÅØ
        const message = `üõí **Êñ∞Ë®ÇÂñÆÈÄöÁü•**

üìã **Ë®ÇÂñÆÁ∑®Ëôü**: ${orderData.orderId}
üìÖ **Ë®ÇÂñÆÊôÇÈñì**: ${new Date(orderData.orderDate).toLocaleString('zh-TW', { timeZone: 'Asia/Taipei' })}

üë§ **ÂÆ¢Êà∂Ë≥áË®ä**:
‚Ä¢ ÂßìÂêç: ${orderData.customer.name}
‚Ä¢ ÈõªË©±: ${orderData.customer.phone}

üè™ **ÂèñË≤®ÈñÄÂ∏Ç**:
‚Ä¢ ${orderData.store.name}
‚Ä¢ ${orderData.store.address || 'Âú∞ÂùÄÊú™Êèê‰æõ'}
‚Ä¢ Â∫óËôü: ${orderData.store.id}

üõçÔ∏è **Ë®ÇË≥ºÂïÜÂìÅ**:
${orderData.items.map(item => 
    `‚Ä¢ ${item.name} x${item.quantity} - NT$ ${item.price * item.quantity}${item.flavor ? `\n  Âè£Âë≥: ${item.flavor}` : ''}${item.color ? `\n  È°èËâ≤: ${item.color}` : ''}`
).join('\n')}

üí∞ **ÈáëÈ°çÊòéÁ¥∞**:
‚Ä¢ ÂïÜÂìÅÂ∞èË®à: NT$ ${orderData.subtotal}
‚Ä¢ ÈÅãË≤ª: NT$ ${orderData.shipping}
‚Ä¢ **Á∏ΩË®à: NT$ ${orderData.total}**

Ë´ãÁõ°Âø´ËôïÁêÜÊ≠§Ë®ÇÂñÆÔºÅ`;

        // ‰ΩøÁî® node-fetch Êàñ AWS SDK ÁôºÈÄÅË´ãÊ±Ç
        const https = require('https');
        
        const telegramData = JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text: message,
            parse_mode: 'Markdown'
        });

        const options = {
            hostname: 'api.telegram.org',
            port: 443,
            path: `/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': telegramData.length
            }
        };

        // ÁôºÈÄÅË´ãÊ±ÇÂà∞ Telegram
        const telegramResponse = await new Promise((resolve, reject) => {
            const req = https.request(options, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                    data += chunk;
                });
                
                res.on('end', () => {
                    try {
                        const response = JSON.parse(data);
                        resolve({ statusCode: res.statusCode, data: response });
                    } catch (e) {
                        reject(e);
                    }
                });
            });
            
            req.on('error', reject);
            req.write(telegramData);
            req.end();
        });

        if (telegramResponse.statusCode !== 200 || !telegramResponse.data.ok) {
            console.error('Telegram API error:', telegramResponse.data);
            return {
                statusCode: 500,
                headers,
                body: JSON.stringify({ 
                    error: 'Failed to send Telegram notification',
                    details: telegramResponse.data.description 
                })
            };
        }

        // ÊàêÂäüÂõûÊáâ
        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({ 
                success: true,
                message: 'Notification sent successfully',
                messageId: telegramResponse.data.result.message_id
            })
        };

    } catch (error) {
        console.error('Lambda execution error:', error);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ 
                error: 'Internal server error',
                message: error.message 
            })
        };
    }
}; 